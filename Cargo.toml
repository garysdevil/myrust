[package]
name = "myrust"
version = "0.1.0"
edition = "2021"
default-run = "myrust" # 指定默认要运行的bin

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[[bin]]
name = "myrust" # 构建后生成指定的二进制名。默认为文件夹名
path = "src/main.rs" # 构建后生成指定的二进制名。默认为src/bin/${name}/main.rs

[[bin]]
name = "blockchain"
# path = "src/bin/myblockchain/main.rs" # 构建后生成指定的二进制名。默认为src/bin/${name}/main.rs
required-features = ["feature_myblockchain"]

[[bin]]
name = "miniredis"
required-features = ["feature_miniredis"]

[workspace]
members = ["myutils", "myblockchain", "mydocs"]# 共享同样的 Cargo.lock 和 target输出目录。通过共享一个 target 目录，工作空间可以避免其他 crate 多余的重复构建。但子项目的依赖需要在这个文件和子项目的Cargo.toml文件里进行标注。
# exclude = ["myutils", "myblockchain"]

[features] # 条件编译
default = ["feature_rayon"]
feature_rayon = ["rayon"]
feature_custommacro = ["custom-macro"]
feature_miniredis = ["mini-redis"]
feature_myblockchain= ["myblockchain"]

[lib] # 添加此配置则必须创建src/lib.rs文件(cargo new ${project} --lib 时会自动生成此文件)
path = "src/lib.rs" # 可以手动指定lib.rs文件的路径
# proc-macro = true # 通知 cargo，该项目将会创建过程宏。 /src/lib.rs，只能定义宏

[dependencies]
rand = { version = "0.8.5" }
rand_chacha = { version = "0.3.1" } 
clap = { version = "3.2.4", features = [ "derive" ] }
chrono = { version="0.4.19" }
num_cpus = { version = "1.13.1" } 
rocksdb = { version = "0.18.0" }
myutils = { path = "./myutils" }

tracing = { version = "0.1.35"  }
tracing-subscriber = { version = "0.3.15", default-features = false, features = ["fmt", "ansi", "env-filter", "tracing-log"] }
console-subscriber = { version = "0.1.6"  }
bytes = "1.2"

# tokio = { version = "^1.19.2", features = ["full"] }
tokio = { version = "1", features = ["full", "tracing"] } # 异步运行时库 # 开启 tokio-console 功能，tokio-console 还是一个不稳定的功能，RUSTFLAGS="--cfg tokio_unstable" cargo run
tokio-stream = { version = "0.1.9" } 
tokio-util = { version = "0.7.3", features = ["full"] } 
futures = { version = "0.3.21" }

[dependencies.rayon]
optional = true
version = "1.5.3"

[dependencies.mini-redis]
optional = true
version = "0.4" # 学习tokio时需要用到

[dependencies.myblockchain]
optional = true # # 可选依赖，满足条件才拉取进行编译
path="./myblockchain"

[dependencies.custom-macro]
optional = true # # 可选依赖，满足条件才拉取进行编译
path="./custom-macro"

# [dependencies.macro_2]
# # 创建过程宏时的第三方工具
# quote = "1.0.9"                
# proc-macro2 = "1.0.27" 
# syn = {version="1.0.72", features=["full"]}


[dev-dependencies]
criterion = { version = "0.3.5" }

[[bench]]
name = "benchmark1" # 默认会去这些路径寻找文件 benches/${name}/main.rs benches/${name}.rs
harness = false

[profile.dev]
opt-level = 0 # opt-level代表了优化等级，从0到3，开发模式的默认优化等级是0。（cargo build）

[profile.release]
opt-level = 3 # 发布模式的默认优化等级是3.（cargo build --release）
